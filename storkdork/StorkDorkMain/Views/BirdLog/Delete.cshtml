@model StorkDorkMain.Models.Sighting
@{
    ViewData["Title"] = "Delete Sighting";
}

@section Styles {
    <link href="https://fonts.googleapis.com/css2?family=Darumadrop+One&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        /* Maintain all original details page styles */
        @@keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .animated-gradient {
            background: linear-gradient(-45deg, #E9E3B4, #fad0c4, #fbb792, #F39B6D);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
        }

        .h2, .h4, .user-notes, .text-center {
            font-family: 'Darumadrop One', sans-serif;
            color: #381D2A;
        }

        .text-pink {
            color: #396990
        }

        /* Delete-specific styles */
        .delete-header {
            background: #dc3545 !important;
            color: white !important;
            padding: 1rem;
            border-radius: 15px 15px 0 0;
            margin: -1rem -1rem 2rem -1rem;
        }
    </style>
}

<div class="container py-5">
    <!-- Back Button Upper Left -->
    <a asp-action="Index" class="btn btn-outline-secondary mb-4">
        <i class="fas fa-arrow-left"></i> Back to Logs
    </a>

    <!-- Card Structure Matching Details Page -->
    <div class="card shadow-lg mx-auto p-4" style="max-width: 700px; border-radius: 20px; position: relative; overflow: hidden;">
        <!-- Gradient Background -->
        <div class="animated-gradient" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border-radius: 20px; z-index: 0;"></div>

        <!-- Content -->
        <div style="position: relative; z-index: 1;">
            <!-- Delete Header -->
            <div class="delete-header text-center mb-4">
                <h2 class="mb-0">DELETE ENTRY</h2>
            </div>

            <!-- Image -->
            <div class="text-center mb-4">
                @if (Model.PhotoData != null && Model.PhotoContentType != null)
                {
                    <img src="data:@Model.PhotoContentType;base64,@Convert.ToBase64String(Model.PhotoData)" 
                         class="img-fluid rounded" alt="Bird Photo" 
                         style="max-height: 300px; object-fit: cover; border-radius: 15px;">
                }
                else
                {
                    <img src="/images/placeholder-bird.svg" 
                         class="img-fluid rounded" alt="Bird Image" 
                         style="max-height: 300px; object-fit: cover; border-radius: 15px;">
                }
            </div>

            <!-- Names (Maintained exactly from details page) -->
            <h2 class="text-center fw-bold">Name: @(Model.Bird?.CommonName ?? "Unknown Bird")</h2>
            <h2 class="text-center fw-bold">Scientific Name: @(Model.Bird?.ScientificName ?? "Unknown Bird")</h2>

            <!-- Family Info Side by Side -->
            <div class="d-flex justify-content-center gap-4 mt-3 mb-4">
                <div>
                    <h5 class="text-center fw-bold text-pink mb-0">Family (Scientific)</h5>
                    <p class="text-center">@(Model.Bird?.FamilyScientificName ?? "Unknown")</p>
                </div>
                <div>
                    <h5 class="text-center fw-bold text-pink mb-0">Family (Common)</h5>
                    <p class="text-center">@(Model.Bird?.FamilyCommonName ?? "Unknown")</p>
                </div>
            </div>

            <!-- Notes -->
            <div class="mb-4">
                <h4 class="text-center fw-bold">Notes</h4>
                <p class="fs-5 text-center user-notes">
                    @if (!string.IsNullOrEmpty(Model.Notes))
                    {
                        var notesParts = Model.Notes.Split(new[] { "|||" }, StringSplitOptions.RemoveEmptyEntries);
                        var userNotes = notesParts.Length > 0 ? notesParts[0].Trim() : "";
                        @userNotes
                    }
                    else
                    {
                        <span class="text-muted">No Notes Recorded.</span>
                    }
                </p>
            </div>

            <!-- Location -->
            <div class="mb-3">
                <h4 class="text-center fw-bold">Spotted</h4>
                @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
                {
                    <div class="location-display p-3 rounded bg-light border text-center" 
                         data-lat="@Model.Latitude.Value.ToString("0.0000")" 
                         data-lng="@Model.Longitude.Value.ToString("0.0000")">
                        <div class="loading-spinner small mb-2"></div>
                        <div class="location-name text-muted small"></div>
                    </div>
                }
                else
                {
                    <p class="text-muted text-center">No location data recorded.</p>
                }
            </div>

            <!-- Date -->
            <p class="fs-5 text-center">
                <strong>Date:</strong>
                @(Model.Date?.ToString("MMMM dd, yyyy") ?? "No Date Recorded")
            </p>

            <!-- Timestamp -->
            <p class="text-muted small text-center mb-3">
                Last updated @DateTime.Now.ToString("MMM dd, yyyy hh:mm tt")
            </p>

            <!-- Warning Message -->
            <div class="alert alert-danger text-center mt-4">
                <i class="fas fa-exclamation-triangle"></i> This action will permanently delete this entry!
            </div>
        </div>
    </div>

    <!-- Delete Form Outside Card -->
    <div class="text-center mt-4">
        <form asp-action="Delete">
            <input type="hidden" asp-for="Id" />
            <button type="submit" class="btn btn-danger btn-lg">
                <i class="fas fa-trash"></i> Confirm Delete
            </button>
            <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary btn-lg">
                <i class="fas fa-times"></i> Cancel
            </a>
        </form>
    </div>
</div>

@section Scripts {
<script>
    // Same Location Script as Details Page
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('.location-display').forEach(container => {
            const lat = container.dataset.lat;
            const lng = container.dataset.lng;
            const nameDiv = container.querySelector('.location-name');
            const spinner = container.querySelector('.loading-spinner');

            if (lat && lng) {
                spinner.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading location...';

                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`, {
                    headers: { 'User-Agent': 'StorkDork/1.0 (contact@yourdomain.com)' }
                })
                .then(response => {
                    if (!response.ok) throw new Error("Request failed");
                    return response.json();
                })
                .then(data => {
                    spinner.innerHTML = '';
                    const address = data.address || {};
                    const locationParts = [
                        address.road,
                        address.neighbourhood,
                        address.city,
                        address.state,
                        address.country
                    ].filter(Boolean).join(', ');
                    nameDiv.textContent = locationParts || "Location not found";
                })
                .catch(error => {
                    console.error("Geocoding failed:", error);
                    spinner.innerHTML = '';
                    nameDiv.textContent = "Could not load location";
                    nameDiv.classList.add('text-danger');
                });
            }
        });
    });
</script>
}
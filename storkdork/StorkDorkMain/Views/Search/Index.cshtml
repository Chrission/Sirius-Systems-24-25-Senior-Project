@model StorkDorkMain.Models.SearchResultsViewModel

<div class="search-container container-fluid mb-4">
    <div class="row">
        <div class="col">
            <h1>Search Birds</h1>
            <p>Search for birds by their common name or scientific name.</p>
            <div class="input-group">
                <input type="text" 
                    id="searchInput" 
                    class="form-control" 
                    placeholder="Search birds..."
                    autocomplete="off">
                <div class="input-group-append">
                    <button id="searchButton" class="btn btn-primary" type="button" onclick="submitSearch()">Search</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div id="searchPreview" class="search-preview d-none">
                <!-- Preview results will appear here -->
            </div>
        </div>
    </div>
</div>

@if (Model?.Birds != null && Model.Birds.Any())
{
    <div class="search-results mt-4">
        <h3>Search Results for "@Model.SearchTerm"</h3>
        
        <div class="list-group">
            @foreach (var bird in Model.Birds)
            {
                <a href="@Url.Action("Details", "Bird", new { id = bird.Id })" 
                   class="list-group-item list-group-item-action">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-1">@bird.CommonName</h5>
                            <p class="mb-1 text-muted"><em>@bird.ScientificName</em></p>
                        </div>
                        <span class="badge badge-primary badge-pill">
                            <i class="fas fa-chevron-right"></i>
                        </span>
                    </div>
                </a>
            }
        </div>

        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Search results pages" class="mt-4">
                <ul class="pagination justify-content-center">
                    @{
                        const int maxPagesBeforeEllipsis = 2;
                        const int maxPagesAfterEllipsis = 2;
                        
                        // Previous button
                        if (Model.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("SearchBirds", new { searchTerm = Model.SearchTerm, page = Model.CurrentPage - 1 })">
                                    Previous
                                </a>
                            </li>
                        }

                        // First page
                        <li class="page-item @(1 == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("SearchBirds", new { searchTerm = Model.SearchTerm, page = 1 })">1</a>
                        </li>

                        // Start ellipsis
                        if (Model.CurrentPage - maxPagesBeforeEllipsis > 2)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }

                        // Pages around current page
                        for (int i = Math.Max(2, Model.CurrentPage - maxPagesBeforeEllipsis); 
                             i <= Math.Min(Model.TotalPages - 1, Model.CurrentPage + maxPagesAfterEllipsis); i++)
                        {
                            if (i > 1 && i < Model.TotalPages)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("SearchBirds", new { searchTerm = Model.SearchTerm, page = i })">
                                        @i
                                    </a>
                                </li>
                            }
                        }

                        // End ellipsis
                        if (Model.CurrentPage + maxPagesAfterEllipsis < Model.TotalPages - 1)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }

                        // Last page
                        if (Model.TotalPages > 1)
                        {
                            <li class="page-item @(Model.TotalPages == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("SearchBirds", new { searchTerm = Model.SearchTerm, page = Model.TotalPages })">
                                    @Model.TotalPages
                                </a>
                            </li>
                        }

                        // Next button
                        if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("SearchBirds", new { searchTerm = Model.SearchTerm, page = Model.CurrentPage + 1 })">
                                    Next
                                </a>
                            </li>
                        }
                    }
                </ul>
            </nav>
        }
    </div>
}

<style>
    .search-container {
        position: relative;
    }
    .search-preview {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
    }
    .preview-item {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
    }
    .preview-item:hover {
        background-color: #f8f9fa;
    }
    .scientific-name {
        font-style: italic;
        color: #666;
        font-size: 0.9em;
    }

    .search-results {
        max-width: 800px;
        margin: 0 auto;
    }

    .list-group-item {
        transition: background-color 0.2s ease;
    }

    .list-group-item:hover {
        background-color: #f8f9fa;
    }

    .pagination {
        margin-bottom: 2rem;
    }
</style>

@section Scripts {
    <script>
        let searchTimeout;
        const DEBOUNCE_DELAY = 300; // Delay in milliseconds

        document.getElementById('searchInput').addEventListener('input', function(e) {
            // Clear any existing timeout
            clearTimeout(searchTimeout);
            
            const searchTerm = e.target.value.trim();
            
            if (searchTerm.length < 2) {
                hidePreview();
                return;
            }
            
            // Set new timeout
            searchTimeout = setTimeout(() => {
                performPreviewSearch(searchTerm);
            }, DEBOUNCE_DELAY);
        });

        searchInput.addEventListener('keypress', function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                submitSearch();
            }
        });

        function performPreviewSearch(searchTerm) {
            fetch(`/Search/SearchPreview?searchTerm=${encodeURIComponent(searchTerm)}`)
                .then(response => response.json())
                .then(data => {
                    const preview = document.getElementById('searchPreview');
                    
                    if (data.length === 0) {
                        hidePreview();
                        return;
                    }
                    
                    preview.innerHTML = data.map(bird => `
                        <div class="preview-item" onclick="selectBird('${bird.commonName}')">
                            <div>${bird.commonName}</div>
                            <div class="scientific-name">${bird.scientificName}</div>
                        </div>
                    `).join('');
                    
                    preview.classList.remove('d-none');
                })
                .catch(error => console.error('Error:', error));
        }

        function selectBird(commonName) {
            document.getElementById('searchInput').value = commonName;
            hidePreview();
            submitSearch();
        };

        function hidePreview() {
            document.getElementById('searchPreview').classList.add('d-none');
        };

        // Hide preview when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.search-container')) {
                hidePreview();
            }
        });

        function submitSearch() {
            const searchTerm = document.getElementById('searchInput').value.trim();
            if (searchTerm) {
                window.location.href = `/Search/SearchBirds?searchTerm=${encodeURIComponent(searchTerm)}`;
            }
        }
    </script>
}
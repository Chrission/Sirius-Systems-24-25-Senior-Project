@model StorkDorkMain.Models.BirdDetailsViewModel

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-4">
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img src="@Model.ImageUrl" alt="@Model.Bird.CommonName" class="img-fluid rounded" />
            }
        </div>
        
        @* bird info *@
        <div class="col-md-8">
            <h1>@Model.Bird.CommonName</h1>
            <h3><em>@Model.Bird.ScientificName</em></h3>
            
            <div class="card mt-3">
                <div class="card-header">
                    <h4>Taxonomy</h4>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-3">Order</dt>
                        <dd class="col-sm-9">@Model.Bird.Order</dd>
                        
                        <dt class="col-sm-3">Family</dt>
                        <dd class="col-sm-9">@Model.Bird.FamilyCommonName (@Model.Bird.FamilyScientificName)</dd>
                    </dl>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Bird.Range))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h4>Range</h4>
                    </div>
                    <div class="card-body">
                        <p>@Model.Bird.Range</p>
                    </div>
                </div>
            }

            <div class="mt-3">
                <a href="@Url.Action("Create", "BirdLog", new { commonName = Model.Bird.CommonName })" class="btn btn-success">
                    Log as a Bird Sighting
                </a>
            </div>
        </div>
    </div>

    @* sightings map *@
    <div class="row">
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header">
                    <h4>Recent Sightings</h4>
                </div>
                <div class="card-body">
                    <div id="map" style="height: 400px;" class="rounded"></div>
                    <div id="sightingInfo" class="mt-2"></div>
                </div>
            </div>
        </div>

        @* related birds *@
        <div class="col-md-6">
            @if (Model.RelatedBirds != null)
            {
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4>Related Birds</h4>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                Filter by Type: @(Model.CategoryFilter?.ToUpper() ?? "ALL")
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item @(Model.CategoryFilter == null ? "active" : "")" 
                                      href="@Url.Action("Details", new { id = Model.Bird.Id })">All</a></li>
                                @foreach (var category in BirdDetailsViewModel.Categories)
                                {
                                    <li><a class="dropdown-item @(Model.CategoryFilter == category ? "active" : "")" 
                                          href="@Url.Action("Details", new { id = Model.Bird.Id, categoryFilter = category })">
                                        @category.ToUpper()
                                    </a></li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (Model.RelatedBirds.Any())
                        {
                            <div class="list-group">
                                @foreach (var relatedBird in Model.RelatedBirds)
                                {
                                    <a href="@Url.Action("Details", new { id = relatedBird.Bird.Id })" 
                                       class="list-group-item list-group-item-action">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@relatedBird.Bird.CommonName</strong>
                                                <br />
                                                <small class="text-muted">@relatedBird.Bird.ScientificName</small>
                                            </div>
                                            <span class="badge bg-secondary">
                                                @relatedBird.GetRelationType()
                                            </span>
                                        </div>
                                    </a>
                                }
                            </div>
                            
                            @if (Model.TotalPages > 1)
                            {
                                <nav aria-label="Related birds pages" class="mt-3">
                                    <ul class="pagination justify-content-center">
                                        @for (int i = 1; i <= Model.TotalPages; i++)
                                        {
                                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Details", new { id = Model.Bird.Id, categoryFilter = Model.CategoryFilter, page = i })">
                                                    @i
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            }
                        }
                        else
                        {
                            <div class="alert alert-info">
                                @if (Model.CategoryFilter != null)
                                {
                                    <p>No related birds found in category '@Model.CategoryFilter.ToUpper()'. 
                                       <a href="@Url.Action("Details", new { id = Model.Bird.Id })">View all related birds</a>
                                    </p>
                                }
                                else
                                {
                                    <p>No related birds found for this species.</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <script>
        let map;
        let markers = [];
        const DEFAULT_LAT = 44.8485; // Monmouth, OR
        const DEFAULT_LNG = -123.2340;

        document.addEventListener('DOMContentLoaded', function() {
            initializeMap();
            setupGeolocation();
            fetchNearestSightings();
        });

        function initializeMap() {
            map = L.map('map').setView([DEFAULT_LAT, DEFAULT_LNG], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Â© OpenStreetMap contributors'
            }).addTo(map);
        }

        function setupGeolocation() {
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    map.setView([position.coords.latitude, position.coords.longitude], 13);
                    fetchNearestSightings(position.coords.latitude, position.coords.longitude);
                }, function(error) {
                    fetchNearestSightings(DEFAULT_LAT, DEFAULT_LNG);
                });
            } else {
                fetchNearestSightings(DEFAULT_LAT, DEFAULT_LNG);
            }
        }

        async function fetchNearestSightings(lat = DEFAULT_LAT, lng = DEFAULT_LNG) {
            try {
                const response = await fetch(`/api/map/GetNearestSightings?birdId=@Model.Bird.Id&lat=${lat}&lng=${lng}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch sightings');
                }
                const sightings = await response.json();
                displaySightings(sightings);
            } catch (error) {
                console.error('Error fetching sightings:', error);
                document.getElementById('sightingInfo').innerHTML = 
                    '<div class="alert alert-info">No recent sightings found nearby.</div>';
            }
        }

        function displaySightings(sightings) {
            clearMarkers();
            const bounds = L.latLngBounds();

            sightings.forEach(sighting => {
                if (sighting.latitude && sighting.longitude && 
                    !isNaN(parseFloat(sighting.latitude)) && 
                    !isNaN(parseFloat(sighting.longitude))) {
                    
                    const lat = parseFloat(sighting.latitude);
                    const lng = parseFloat(sighting.longitude);
                    
                    try {
                        const marker = L.marker([lat, lng])
                            .bindPopup(createPopupContent(sighting))
                            .addTo(map);
                        
                        markers.push(marker);
                        bounds.extend([lat, lng]);
                    } catch (error) {
                        console.error('Error creating marker:', error, sighting);
                    }
                }
            });

            if (markers.length > 0) {
                map.fitBounds(bounds, { padding: [50, 50] });
                updateSightingInfo(sightings);
            } else {
                document.getElementById('sightingInfo').innerHTML = 
                    '<div class="alert alert-info">No valid sighting locations found nearby.</div>';
            }
        }

        function createPopupContent(sighting) {
            const sightingDate = sighting.date ? new Date(sighting.date).toLocaleDateString() : 'Unknown Date';
            const locationInfo = sighting.notes?.split(',')[1]?.replace('Location:', '').trim() || 'Unknown Location';
            const birdCount = sighting.notes ? parseInt(sighting.notes.split(',')[0].replace('Count:', '')) || 0 : 0;
            return `
                <div>
                    <h6>${'@Model.Bird.CommonName' || 'Unknown Bird'}</h6>
                    <p>Date: ${sightingDate}</p>
                    <p>Location: ${locationInfo}</p>
                    <p>Count: ${birdCount}</p>
                </div>
            `;
        }

        function updateSightingInfo(sightings) {
            const infoDiv = document.getElementById('sightingInfo');
            if (sightings.length === 0) {
                infoDiv.innerHTML = '<div class="alert alert-info">No recent sightings found nearby.</div>';
            } else {
                infoDiv.innerHTML = `<div class="alert alert-success">Found ${sightings.length} recent sightings nearby.</div>`;
            }
        }

        function clearMarkers() {
            markers.forEach(marker => marker.remove());
            markers = [];
        }
    </script>
}